// Vyper grammar for Lark
// Adapted from Lark repo. https://github.com/lark-parser/lark/blob/master/examples/python3.lark
// Adapted from: https://docs.python.org/3/reference/grammar.html
// Adapted by: Erez Shinan

// A module is a sequence of definitions and methods (and comments).
// NOTE: Start symbol for the grammar
module: ( COMMENT
        | import
        | struct_def
        | interface_def
        | constant_def
        | variable_def
        | event_def
        | method_def
        | _NEWLINE )*

// Import statements (Supports all styles of Python imports)
!dots: "."+
import_name: NAME ("." NAME)*
import_rename: NAME ("." NAME)* "as" NAME
import_list: (import_name | import_rename) ("," (import_name | import_rename) )* [","]
import_from: "from" (dots? import_name | dots)
import: ( "import" (import_name | import_rename)
        | import_from "import" ( "*" | import_name | import_rename )
        | import_from "import" "(" import_list ")" )

// Constant definitions
// NOTE: Temporary until decorators used
constant_def: NAME ":" "constant" "(" type ")" "=" test

variable: NAME ":" type
// NOTE: Temporary until decorators used
variable_with_getter: NAME ":" "public" "(" type ")"
variable_def: variable | variable_with_getter

// A decorator "wraps" a method, modifying it's context.
// NOTE: One or more can be applied (some combos might conflict)
decorator: "@" NAME [ "(" [arguments] ")" ] _NEWLINE
decorators: decorator+

// Methods take a list of zero or more typed parameters,
// and can return up to one parameter.
// NOTE: Parameters can have a default value,
//       which must be a constant or environment variable.
?parameter: NAME ":" type ["=" test]
parameters: parameter ("," parameter?)*

method_type: "def" NAME "(" parameters? ")" ["->" type]
method_def: [decorators] method_type ":" body

indexed_event_arg: NAME ":" "indexed" "(" type ")"
// Events can have zero args
event_def: NAME ":" "event" "(" "{" (variable | indexed_event_arg)? ("," (variable | indexed_event_arg))* "}" ")"

?stmt: simple_stmt | if_stmt | for_stmt
?simple_stmt: small_stmt (small_stmt)* _NEWLINE
?small_stmt: (expr_stmt | pass_stmt | flow_stmt | assert_stmt)
?expr_stmt: testlist_star_expr (assign | augassign (testlist)
         | ("=" (testlist_star_expr))*)
assign: ":" test ["=" test]
?testlist_star_expr: (test) ("," (test))* [","]
!augassign: ("+=" | "-=" | "*=" | "/=" | "**=" | "%=")
// For normal and annotated assignments, additional restrictions enforced by the interpreter
pass_stmt: "pass"
?flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [testlist]
raise_stmt: "raise" [test ["from" test]]
assert_stmt: "assert" test ["," test]

if_stmt: "if" test ":" body ("elif" test ":" body)* ["else" ":" body]
for_stmt: "for" exprlist "in" testlist ":" body ["else" ":" body]

// // NB compile.c makes sure that the default except clause is last
// except_clause: "except" [test ["as" NAME]]
body: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

?test: or_test ["if" or_test "else" test]
?test_nocond: or_test
?or_test: and_test ("or" and_test)*
?and_test: not_test ("and" not_test)*
?not_test: "not" not_test -> not
         | comparison
?comparison: expr (_comp_op expr)*
?expr: arith_expr
?arith_expr: term (_add_op term)*
?term: factor (_mul_op factor)*
?factor: _factor_op factor | power

!_factor_op: "+"|"-"
!_add_op: "+"|"-"
!_shift_op: "<<"|">>"
!_mul_op: "*"|"/"|"%"
!_comp_op: "<"|">"|"=="|">="|"<="|"!="|"in"|"not" "in"|"is"|"is" "not"

?power: atom_expr ["**" factor]

?argument: test ["=" test]

arguments: argument ("," argument)*  // [","]
         | test comp_for

?atom_expr: atom_expr "(" [arguments] ")"    -> call
          | atom_expr "[" subscriptlist "]"  -> getitem
          | atom_expr "." NAME               -> getattr
          | atom

?atom: "(" [testlist_comp] ")" -> tuple
     | "[" [testlist_comp] "]"  -> list
     |"{" [dictmaker] "}" -> dict
     | NAME -> var
     | number_literal | string_literal+
     | "(" test ")"
     | "True"    -> const_true
     | "False"   -> const_false

?testlist_comp: (test) [("," (test))+ [","] | ","]
subscriptlist: subscript ("," subscript)*
subscript: test
exprlist: (expr) ("," (expr))* [","]
testlist: test ("," test)* [","]
dictmaker: ( ((test ":" test) ("," (test ":" test))* [","]) )

comp_iter: comp_for | comp_if
comp_for: "for" exprlist "in" or_test [comp_iter]
comp_if: "if" test_nocond [comp_iter]

array: (NAME | array) "[" (DEC_NUMBER | NAME) "]"
tuple: "(" ( NAME | array | tuple ) ( "," ( NAME | array | tuple ) )* [","] ")"
// NOTE: Map takes a basic type and maps to another type (can be non-basic, including maps)
map: "map" "(" ( NAME | array ) "," type ")"
type: ( NAME | array | tuple | map )

// Structs can be composed of 1+ basic types or other custom_types
?struct_member: NAME ":" type
struct_def: "struct" NAME ":" _NEWLINE _INDENT (struct_member _NEWLINE)+ _DEDENT

// Interfaces are composed of a series of method definitions, plus their mutability
mutability: ( "modifying" | "constant" )
interface_def: "contract" NAME ":" _NEWLINE _INDENT (method_type ":" mutability _NEWLINE)+ _DEDENT

// not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl: NAME


number_literal: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER
string_literal: STRING | LONG_STRING
// Tokens

NAME: /[a-zA-Z_]\w*/
COMMENT: /#[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+


STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

DEC_NUMBER: /0|[1-9]\d*/i
HEX_NUMBER.2: /0x[\da-f]*/i
OCT_NUMBER.2: /0o[0-7]*/i
BIN_NUMBER.2 : /0b[0-1]*/i
FLOAT_NUMBER.2: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT
